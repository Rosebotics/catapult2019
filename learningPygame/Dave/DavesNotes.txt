Things I've learned that I can use on my project...

00-Moving Smile
 - Drawing circle and rect
    pygame.draw.circle(screen, (80, 0, 0), (320, nose_y), 15, 6)
    # pygame.draw.rect(screen, color, (x, y, width, height), thickness)
    pygame.draw.rect(screen, (100, 0, 0), (240, 350, 160, 30))
 - Listening to key press events
    pressed_keys = pygame.key.get_pressed()
    if pressed_keys[pygame.K_UP]:
        nose_y = 50
 - Clock
    clock = pygame.time.Clock()
    clock.tick(60)
 - Game loop


01-DogBark
 - Images
    dog_image = pygame.image.load("2dogs.JPG")
    screen.blit(dog_image, (0, 0))
 - Sounds
    pygame.mixer.music.load("bark.mp3")
    pygame.mixer.music.play()
 - Text
    pygame.font.init()
    big_font = pygame.font.Font(None, 56)
    caption2 = big_font.render("TURNZ OVER!", True, WHITE)
    screen.blit(caption2, ( (IMAGE_SIZE - caption2.get_width()) // 2  , 400))

02-ClickInTheCircle
 - Mouse click position
    if event.type == pygame.MOUSEBUTTONDOWN:
        click_position = event.pos
        distance_from_circle = distance(click_position, circle_center)
 - Playing music forever and stopping music
    if distance_from_circle < circle_radius:
        pygame.mixer.music.play(-1)
    else:
        pygame.mixer.music.stop()
 - Practice with drawing and review of using text


03-Raindrops
 - Learning to work with Classes to manage sprites on the screen (Raindrop, Hero, Cloud)
 - These Sprite classes often have instance variables: screen, x, and y (or image)
 - They also have methods like: __init__, draw, and others (like move)
 - More practice with collidepoint
 - time.time() to track the current seconds since epoch (note: it had this line import time at the top)
 - More practice with loops, if statements, and more


04-BouncingBall
 - Practice making a Class to represent an on-screen sprite
 - Practice using a list to manage many objects

05-TicTacToe
 - Created a class to manage the data for the game state
 - Nested for loops
 - 2D array (lists within lists)
